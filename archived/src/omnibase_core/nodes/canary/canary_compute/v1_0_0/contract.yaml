# Canary Compute - ONEX Contract
# Compute node for canary deployment business logic processing

# === REQUIRED ROOT FIELDS ===
contract_version: {major: 1, minor: 0, patch: 0}
node_name: "canary_compute"
node_version: {major: 1, minor: 0, patch: 0}
contract_name: "canary_compute_contract"
description: "Canary Compute Node - Business logic processing for canary deployments"
node_type: "COMPUTE"
name: "canary_compute"
version: {major: 1, minor: 0, patch: 0}
input_model: "ModelCanaryComputeInput"
output_model: "ModelCanaryComputeOutput"

# === NODE CLASSIFICATION ===
# (node_type already defined above at line 10)

# === MODEL SPECIFICATIONS ===

# === COMPUTE NODE CONFIGURATION ===
# COMPUTE nodes are stateless - no aggregation or state management subcontracts needed
# Use REDUCER nodes for stateful operations

# === ALGORITHM CONFIGURATION (Required for COMPUTE nodes) ===
algorithm:
  algorithm_type: "message_aggregation"
  factors:
    group_correlation:
      weight: 0.4
      calculation_method: "correlation_analysis"
      parameters:
        correlation_threshold: 0.8
      normalization_enabled: true
      caching_enabled: true
    message_processing:
      weight: 0.4
      calculation_method: "batch_processing"
      parameters:
        batch_size: 100.0
      normalization_enabled: true
      caching_enabled: true
    state_computation:
      weight: 0.2
      calculation_method: "state_aggregation"
      parameters:
        state_window_ms: 1000.0
      normalization_enabled: true
      caching_enabled: true

tool_specification:
  tool_name: "tool_infrastructure_message_aggregator_compute"
  version: {major: 1, minor: 0, patch: 0}
  description: "Cross-group message aggregation and state management with PostgreSQL persistence"
  main_tool_class: "NodeCanaryCompute"
  container_injection: "ONEXContainer"
  business_logic_pattern: "compute"

# === METADATA ===
metadata:
  tier: 3
  specialization: "reducer"
  category: "infrastructure"
  architectural_pattern: "node_reducer"
  complexity: "high"

# === SERVICE CONFIGURATION ===
service_configuration:
  is_persistent_service: false
  requires_external_dependencies: false

# === INPUT/OUTPUT ===
input_state:
  object_type: "object"
  required: ["operation_type", "group_messages", "aggregation_strategy"]
  optional: ["correlation_id", "timeout_ms", "state_key"]

output_state:
  object_type: "object"
  required: ["status", "aggregated_result"]
  optional: ["error_message", "state_snapshot", "aggregation_metrics"]

# === ACTIONS ===
actions:
  - name: "aggregate_messages"
    description: "Aggregate messages from multiple tool groups"
    inputs: ["group_messages", "aggregation_strategy", "correlation_id"]
    outputs: ["aggregated_result", "aggregation_metrics"]

  - name: "persist_state"
    description: "Persist aggregation state to PostgreSQL"
    inputs: ["state_key", "state_data"]
    outputs: ["persistence_status"]

  - name: "restore_state"
    description: "Restore aggregation state from PostgreSQL"
    inputs: ["state_key"]
    outputs: ["state_data", "restoration_status"]

  - name: "health_check"
    description: "Check health of message aggregator and dependencies"
    inputs: []
    outputs: ["status", "dependency_health"]

  - name: "get_aggregation_metrics"
    description: "Get current aggregation performance metrics"
    inputs: []
    outputs: ["aggregation_metrics"]

# === DEPENDENCIES ===
dependencies:
  - name: "event_bus"
    type: "protocol"
    class_name: "ProtocolEventBus"
    module: "omnibase.protocol.protocol_event_bus"

# === PERFORMANCE (Required for COMPUTE nodes) ===
performance:
  single_operation_max_ms: 2000

# === EVENT TYPE CONFIGURATION ===
event_type:
  primary_events: ["message_aggregation", "group_processing", "state_computation"]
  event_categories: ["infrastructure", "messaging", "aggregation"]
  publish_events: true
  subscribe_events: true
  event_routing: "infrastructure"

# === SERVICE RESOLUTION ===
service_resolution:
  event_bus:
    protocol: "ProtocolEventBus"
    strategy: "hybrid"
    primary: "kafka"
    fallback: "event_bus_client"
    discovery: "consul"

infrastructure:
  event_bus: {strategy: "hybrid", primary: "kafka", fallback: "http", consul_discovery: true}

# === ONEX COMPLIANCE ===
contract_driven: true
strong_typing: true
zero_any_types: true
protocol_based: true

# === VALIDATION ===
validation_rules:
  strict_typing_enabled: true
  input_validation_enabled: true
  output_validation_enabled: true
  performance_validation_enabled: true
  constraint_definitions:
    group_messages: "dict type required for message aggregation"
    aggregation_strategy: "string type with values [merge, combine, reduce, collect]"
    operation_type: "string type with values [aggregate, persist, restore, coordinate]"


# === SUBCONTRACTS ===
subcontracts:
  - path: "../../mixins/mixin_error_handling.yaml"
    integration_field: "error_handling_configuration"
  - path: "../../subcontracts/health_check_subcontract.yaml"
    integration_field: "health_check_configuration"
  - path: "../../subcontracts/introspection_subcontract.yaml"
    integration_field: "introspection_configuration"
  - path: "../../subcontracts/performance_monitoring_subcontract.yaml"
    integration_field: "performance_monitoring_configuration"
  - path: "../../subcontracts/request_response_subcontract.yaml"
    integration_field: "request_response_configuration"

# === DEFINITIONS (Required by ModelContractContent) ===
definitions:
  models: {}
  schemas: {}
  responses: {}
