# ONEX Core Pre-commit Configuration
# Uses shared ONEX hook templates to demonstrate ecosystem integration

repos:
  # YAML formatting (standard across ecosystem)
  - repo: https://github.com/google/yamlfmt
    rev: v0.17.2
    hooks:
      - id: yamlfmt
        args: [--formatter, retain_line_breaks=true]
        exclude: ^(work_tickets/|tests/fixtures/validation/invalid/|\.github/workflows/|archived/)

  # Essential file formatting (standard across ecosystem)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
        exclude: ^\.github/workflows/
      - id: end-of-file-fixer
        exclude: ^\.github/workflows/
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]

  # ONEX Python Development Hooks (from shared templates)
  - repo: https://github.com/psf/black
    rev: 25.9.0
    hooks:
      - id: black
        name: Black Python Formatter
        args: [--line-length, "88", --target-version, py311]
        exclude: ^(tests/fixtures/validation/edge_cases/syntax_error\.py|\.github/workflows/|archived/).*$

  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        name: isort Import Sorter
        args: [--profile, black, --line-length, "88"]
        exclude: ^(tests/fixtures/validation/edge_cases/syntax_error\.py|\.github/workflows/|archived/).*$

  # ONEX Framework Validation (from shared templates)
  - repo: local
    hooks:
      # MyPy Type Checking - Re-enabled after fixing compatibility issues
      - id: mypy-poetry
        name: MyPy Type Checking (via Poetry)
        entry: poetry run mypy
        language: system
        types: [python]
        args: [--ignore-missing-imports, --show-error-codes, --no-strict-optional, --no-error-summary, --follow-imports=silent, --config-file=mypy.ini]
        files: ^src/omnibase_core/(core|models|enums|exceptions|types).*\.py$
        exclude: ^(tests/|src/omnibase_core/examples|src/omnibase_core/core/contracts/model_contract_effect|archive/|archived/).*\.py$

      # ONEX Core Framework Validation (SHARED HOOKS)
      - id: validate-repository-structure
        name: ONEX Repository Structure Validation
        entry: poetry run python scripts/validation/validate_structure.py
        args: ['.', 'omnibase_core']
        language: system
        always_run: true
        pass_filenames: false
        stages: [pre-commit]

      - id: validate-naming-conventions
        name: ONEX Naming Convention Validation
        entry: poetry run python scripts/validation/validate_naming.py
        args: ['src/']
        language: system
        pass_filenames: false
        files: ^src/.*\.py$
        exclude: ^(tests/|archive/|archived/|scripts/validation/).*\.py$
        stages: [pre-commit]

      - id: validate-string-versions
        name: ONEX String Version Anti-Pattern Detection
        entry: poetry run python scripts/validation/validate-string-versions.py
        language: system
        pass_filenames: true
        files: ^.*\.(py|yaml|yml)$
        exclude: ^(tests/fixtures/validation/|archived/|archive/)
        stages: [pre-commit]

      - id: validate-archived-imports
        name: ONEX Archived Path Import Prevention
        entry: poetry run python scripts/validation/validate-archived-imports.py
        args: ['src/']
        language: system
        pass_filenames: false
        files: ^.*\.py$
        exclude: ^(archived/|archive/|tests/fixtures/validation/).*$
        stages: [pre-commit]

      - id: validate-no-backward-compatibility
        name: ONEX Backward Compatibility Anti-Pattern Detection
        entry: poetry run python scripts/validation/validate-no-backward-compatibility.py
        args: ['-d', 'src/']
        language: system
        pass_filenames: false
        files: ^.*\.py$
        exclude: ^(scripts/validation/validate-no-backward-compatibility\.py|archived/.*)$
        stages: [pre-commit]

      - id: validate-no-manual-yaml
        name: ONEX Manual YAML Prevention
        entry: poetry run python scripts/validation/validate-no-manual-yaml.py
        language: system
        pass_filenames: true
        files: ^.*\.py$
        exclude: ^(scripts/validation/validate-contracts\.py|scripts/validation/validate-string-versions\.py|scripts/validation/check_stub_implementations\.py|tests/fixtures/validation/)
        stages: [pre-commit]

      # ONEX Python Pattern Validation (SHARED HOOKS)
      - id: validate-pydantic-patterns
        name: ONEX Pydantic Pattern Validation
        entry: poetry run python scripts/validation/validate-pydantic-patterns.py
        args: ['--allow-errors', '13']
        language: system
        pass_filenames: false
        files: ^src/.*\.py$
        stages: [pre-commit]

      - id: validate-union-usage
        name: ONEX Union Usage Validation
        entry: poetry run python scripts/validation/validate-union-usage.py
        args: ['--allow-invalid', '8']
        language: system
        pass_filenames: false
        files: ^src/.*\.py$
        stages: [pre-commit]

      # Repository-specific validation (omnibase_core only)
      - id: validate-contracts
        name: ONEX Contract Validation
        entry: poetry run python scripts/validation/validate-contracts.py
        language: system
        pass_filenames: false
        files: ^src/omnibase_core/(nodes|protocol|core).*\.py$
        stages: [pre-commit]

      - id: audit-optional-usage
        name: ONEX Optional Type Usage Audit
        entry: poetry run python scripts/validation/audit_optional.py
        args: ['.']
        language: system
        always_run: true
        pass_filenames: false
        stages: [pre-commit]

      - id: check-stub-implementations
        name: ONEX Stub Implementation Detector
        entry: poetry run python scripts/validation/check_stub_implementations.py
        language: system
        pass_filenames: true
        files: ^src/.*\.py$
        exclude: ^(tests/|archived/|archive/|examples/prototypes/).*\.py$
        stages: [pre-commit]

      - id: check-no-fallbacks
        name: ONEX No Fallback Patterns Validation
        entry: poetry run python scripts/validation/check_no_fallbacks.py
        language: system
        pass_filenames: true
        files: ^src/.*\.py$
        exclude: ^(tests/|archived/|archive/).*\.py$
        stages: [pre-commit]

      - id: check-error-raising
        name: ONEX Error Raising Validation
        entry: poetry run python scripts/validation/check_error_raising.py
        language: system
        pass_filenames: true
        files: ^src/.*\.py$
        exclude: ^(tests/|archived/|archive/).*\.py$
        stages: [pre-commit]

    # COMPREHENSIVE ONEX STANDARDS VALIDATION (SHARED) - Disabled for now due to local fallback issues
    # This demonstrates how other repositories would use the shared validation
    # - id: validate-onex-standards
    #   name: ONEX Standards Comprehensive Validation
    #   entry: python -c "from omnibase_core.validation import validate_onex_standards; import sys; result = validate_onex_standards('.'); sys.exit(0 if result['success'] else 1)"
    #   language: system
    #   always_run: true
    #   pass_filenames: false
    #   stages: [commit]

# Configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes for omnibase_core

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_schedule: weekly
  submodules: false
