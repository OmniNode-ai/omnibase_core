"""
Model for Claude Code agent events.

This model represents events generated by Claude Code agents for
communication with the ONEX system through the communication bridge.
"""

from datetime import datetime
from enum import Enum

from pydantic import BaseModel, Field


class AgentEventType(str, Enum):
    """Agent event type enumeration."""

    AGENT_STARTED = "agent.started"
    AGENT_STOPPED = "agent.stopped"
    AGENT_ERROR = "agent.error"
    AGENT_HEARTBEAT = "agent.heartbeat"
    WORK_STARTED = "work.started"
    WORK_PROGRESS = "work.progress"
    WORK_COMPLETED = "work.completed"
    WORK_FAILED = "work.failed"
    FILE_MODIFIED = "file.modified"
    VALIDATION_RESULT = "validation.result"
    COMMAND_EXECUTED = "command.executed"


class AgentEventSeverity(str, Enum):
    """Agent event severity levels."""

    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"


class ModelAgentEvent(BaseModel):
    """Agent event model for ONEX communication."""

    event_id: str = Field(description="Unique identifier for this event")
    event_type: AgentEventType = Field(description="Type of agent event")
    agent_id: str = Field(description="ID of the agent that generated this event")
    severity: AgentEventSeverity = Field(
        default=AgentEventSeverity.INFO,
        description="Severity level of the event",
    )
    message: str = Field(description="Human-readable event message")
    data: dict[str, str | int | float | bool | dict[str, str] | list] | None = Field(
        default=None,
        description="Additional event data",
    )
    correlation_id: str | None = Field(
        default=None,
        description="Correlation ID for tracking related events",
    )
    task_id: str | None = Field(
        default=None,
        description="ID of the task this event relates to",
    )
    session_id: str | None = Field(
        default=None,
        description="Agent session identifier",
    )
    source_file: str | None = Field(
        default=None,
        description="Source file related to this event",
    )
    source_line: int | None = Field(
        default=None,
        description="Source line number related to this event",
    )
    timestamp: datetime = Field(
        default_factory=datetime.now,
        description="Event generation timestamp",
    )
    expires_at: datetime | None = Field(
        default=None,
        description="Event expiration timestamp",
    )
    metadata: dict[str, str] | None = Field(
        default=None,
        description="Additional metadata for the event",
    )

    @property
    def is_expired(self) -> bool:
        """Check if event has expired."""
        return self.expires_at is not None and datetime.now() > self.expires_at

    @property
    def is_work_related(self) -> bool:
        """Check if event is related to work execution."""
        return self.event_type in [
            AgentEventType.WORK_STARTED,
            AgentEventType.WORK_PROGRESS,
            AgentEventType.WORK_COMPLETED,
            AgentEventType.WORK_FAILED,
        ]

    @property
    def is_error_event(self) -> bool:
        """Check if event represents an error condition."""
        return self.severity in [AgentEventSeverity.ERROR, AgentEventSeverity.CRITICAL]
