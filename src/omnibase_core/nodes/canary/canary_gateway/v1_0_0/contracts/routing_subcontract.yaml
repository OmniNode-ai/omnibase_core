# Group Gateway Routing Subcontract - Message Routing and Response Aggregation
# This subcontract defines routing behavior for Group Gateway with intelligent aggregation

contract_type: "group_gateway_routing_subcontract"
contract_version:
  major: 1
  minor: 0
  patch: 0

metadata:
  name: "GroupGatewayRoutingSubcontract"
  description: "Message routing and response aggregation patterns for Group Gateway"
  author: "ONEX Framework Team"
  created: "2025-08-21"
  purpose: "Define efficient message routing and intelligent response aggregation"

business_logic:
  pattern: "intelligent_message_routing"
  ai_agent:
    capabilities: ["message_routing", "response_aggregation", "load_balancing"]
    coordination_patterns: ["scatter_gather", "parallel_execution"]
    performance_targets:
      routing_latency: "<10ms"
      aggregation_latency: "<50ms"
      success_rate: ">99%"

# Message Routing Strategy
routing_strategy:
  name: "IntelligentScatterGather"
  description: "High-performance scatter-gather routing with intelligent aggregation"

  # Routing patterns
  routing_patterns:
    broadcast_routing:
      description: "Send message to all specified tools"
      execution_mode: "parallel"
      timeout_handling: "wait_for_all_or_timeout"
      failure_tolerance: "continue_with_partial_results"

    selective_routing:
      description: "Route to specific tools based on message content"
      execution_mode: "parallel"
      routing_logic: "content_based_selection"
      load_balancing: "round_robin"

    priority_routing:
      description: "Route with priority ordering and fallback"
      execution_mode: "sequential_with_fallback"
      priority_logic: "health_and_performance_based"
      circuit_breaker_enabled: true

# Response Aggregation Patterns
aggregation_patterns:
  parallel_aggregation:
    description: "Aggregate responses from parallel tool executions"
    aggregation_strategies:
      - "merge_successful_responses"
      - "collect_all_results"
      - "combine_with_metadata"
      - "preserve_individual_errors"

    merge_rules:
      successful_responses:
        strategy: "deep_merge"
        conflict_resolution: "timestamp_priority"
        data_validation: "schema_based"

      error_responses:
        strategy: "collect_and_categorize"
        error_prioritization: "severity_based"
        error_correlation: "correlation_id_based"

  sequential_aggregation:
    description: "Aggregate responses from sequential tool executions"
    aggregation_strategies:
      - "pipeline_results"
      - "accumulate_state"
      - "early_termination_on_error"

    pipeline_rules:
      data_flow: "output_becomes_input"
      state_preservation: "correlation_id_tracking"
      error_handling: "stop_on_first_error"

# Routing Performance Optimization
performance_optimization:
  connection_management:
    connection_pooling: true
    pool_size_per_tool: 3
    connection_timeout: "10s"
    idle_timeout: "60s"

  parallel_execution:
    max_concurrent_requests: 20
    thread_pool_size: 10
    async_execution: true
    backpressure_handling: "queue_with_timeout"

  load_balancing:
    strategy: "weighted_round_robin"
    health_check_based: true
    response_time_weighted: true
    failure_detection: "circuit_breaker"

# Circuit Breaker Configuration
circuit_breaker:
  per_tool_configuration:
    failure_threshold: 5
    timeout_duration: "30s"
    monitoring_window: "60s"

  states:
    - CLOSED # Normal operation
    - OPEN # Circuit breaker active, failing fast
    - HALF_OPEN # Testing recovery

  recovery_strategy:
    test_request_frequency: "10s"
    success_threshold_for_close: 3
    automatic_recovery: true

# Message Routing Operations
routing_operations:
  message_preparation:
    steps:
      - "validate_message_format"
      - "extract_routing_metadata"
      - "generate_correlation_id"
      - "apply_timeout_constraints"

    validation_rules:
      - "required_fields_present"
      - "data_type_compliance"
      - "message_size_limits"

  tool_discovery:
    discovery_methods:
      - "static_configuration"
      - "dynamic_registry_lookup"
      - "health_based_filtering"

    health_checks:
      - "endpoint_availability"
      - "response_time_validation"
      - "error_rate_monitoring"

  response_collection:
    collection_strategies:
      - "wait_for_all"
      - "wait_for_majority"
      - "wait_with_timeout"
      - "early_termination_on_criteria"

    timeout_handling:
      - "partial_results_acceptable"
      - "retry_timed_out_requests"
      - "mark_tools_unhealthy"

# Error Handling and Recovery
error_handling:
  routing_errors:
    tool_unavailable:
      - "skip_unavailable_tool"
      - "log_unavailability_event"
      - "update_health_status"

    message_validation_failure:
      - "return_validation_error"
      - "log_invalid_message"
      - "update_error_metrics"

    timeout_errors:
      - "return_partial_results"
      - "log_timeout_event"
      - "trigger_circuit_breaker"

  aggregation_errors:
    response_format_mismatch:
      - "attempt_format_normalization"
      - "include_raw_response"
      - "log_format_inconsistency"

    conflicting_responses:
      - "apply_conflict_resolution_rules"
      - "preserve_all_conflicting_data"
      - "flag_conflicts_in_metadata"

# Observability and Monitoring
observability:
  routing_metrics:
    - "group_gateway.messages_routed_total"
    - "group_gateway.routing_duration_ms"
    - "group_gateway.tool_availability_ratio"
    - "group_gateway.aggregation_success_rate"

  performance_metrics:
    - "group_gateway.parallel_execution_efficiency"
    - "group_gateway.response_time_p95"
    - "group_gateway.circuit_breaker_state"
    - "group_gateway.connection_pool_utilization"

  routing_events:
    - "message_routed"
    - "response_aggregated"
    - "tool_unavailable"
    - "circuit_breaker_triggered"
    - "timeout_occurred"

# Routing Quality Assurance
quality_assurance:
  message_integrity:
    - "preserve_correlation_ids"
    - "maintain_message_order"
    - "ensure_response_completeness"

  performance_guarantees:
    - "sub_100ms_routing_latency"
    - "99_percent_success_rate"
    - "graceful_degradation_on_failures"

  reliability_features:
    - "automatic_retry_on_transient_failures"
    - "circuit_breaker_protection"
    - "health_check_based_routing"

# Code Generation Targets
generation_targets:
  python_runtime:
    routing_logic: true
    aggregation_strategies: true
    circuit_breaker_implementation: true
    performance_monitors: true

  configuration_schema:
    routing_configuration: true
    tool_definitions: true
    performance_thresholds: true

# Integration with Main Contract and Caching
integration:
  main_contract_field: "routing_configuration"
  caching_integration: "cache_aggregated_responses"
  mapping_strategy: "direct_embedding"
  backward_compatibility: true
