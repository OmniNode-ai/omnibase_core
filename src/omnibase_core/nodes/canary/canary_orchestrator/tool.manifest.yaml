# ONEX Tool Manifest - Infrastructure Orchestrator
# Tier 2: Tool-level metadata and lifecycle management

# === TOOL IDENTITY ===
tool_name: "tool_infrastructure_orchestrator"
description: "ONEX infrastructure orchestrator for coordinating complex multi-tool workflows"
author: "ONEX Framework Team"
created_date: "2025-08-23T00:00:00Z"
last_modified_date: "2025-08-23T12:00:00Z"

# === TOOL CLASSIFICATION ===
node_type: "ORCHESTRATOR"
business_logic_pattern: "orchestrator"
meta_type: "tool"
runtime_language_hint: "python>=3.11"

# === TOOL STATUS ===
status: "active"
lifecycle: "active"

# === VERSION CATALOG ===
current_stable_version:
  major: 1
  minor: 0
  patch: 0
  prerelease: ""
  build: ""

current_development_version: null

versions:
  - version:
      major: 1
      minor: 0
      patch: 0
      prerelease: ""
      build: ""
    status: "active"
    release_date: "2025-08-23T00:00:00Z"
    breaking_changes: false
    recommended: true
    deprecation_date: null
    end_of_life_date: null
    changelog: "Initial ONEX orchestrator implementation for workflow coordination"

# === CAPABILITIES ===
capabilities:
  - name: "workflow_orchestration"
    description: "Orchestrate complex multi-tool workflows"
    input_types: ["ModelWorkflowRequest"]
    output_types: ["ModelWorkflowResult"]
    operations: ["orchestrate_workflow", "coordinate_tools", "manage_state"]

  - name: "tool_coordination"
    description: "Coordinate multiple infrastructure tools"
    input_types: ["ModelCoordinationRequest"]
    output_types: ["ModelCoordinationResult"]
    operations: ["coordinate_tools", "resolve_dependencies", "handle_failures"]

  - name: "dependency_resolution"
    description: "Resolve dependencies between tool operations"
    input_types: ["ModelDependencyRequest"]
    output_types: ["ModelDependencyResult"]
    operations: ["resolve_dependencies", "validate_dependencies", "order_operations"]

protocols_supported: ["protocol_orchestrator", "protocol_onex_validation"]

# === DEPENDENCIES ===
dependencies:
  - name: "onex_container"
    type: "service"
    target: "omnibase.core.onex_container"
    binding: "injection"
    optional: false
    description: "ONEX dependency injection container"
    version_requirement: ">=1.0.0"

  - name: "event_bus_adapter"
    type: "service"
    target: "omnibase.core.adapters.adapter_bus_shim"
    binding: "injection"
    optional: false
    description: "Event bus communication adapter"
    version_requirement: ">=1.0.0"

  - name: "pytest"
    type: "library"
    target: "pytest"
    binding: "import"
    optional: true
    description: "Testing framework for development"
    version_requirement: ">=7.0.0"

# === SERVICE INTEGRATION ===
integration:
  auto_load_strategy: "current_stable"
  fallback_versions: [{major: 1, minor: 0, patch: 0}]
  version_directory_pattern: "v{major}_{minor}_{patch}"
  implementation_file: "node.py"
  contract_file: "contract.yaml"
  main_class_name: "InfrastructureOrchestrator"
  load_as_module: true
  requires_separate_port: false
  initialization_order: 7
  shutdown_timeout: 60
  health_check_via_service: true

# === EXECUTION METADATA ===
execution_mode: "async"
max_memory_mb: 512
max_cpu_percent: 60
timeout_seconds: 600

# === TESTING CONFIGURATION ===
testing:
  required_ci_tiers: ["unit", "integration"]
  minimum_coverage_percentage: 85.0
  canonical_test_case_ids: ["orchestrator_basic_workflow", "orchestrator_tool_coordination", "orchestrator_dependency_resolution"]
  performance_test_required: true
  security_test_required: true

# === SECURITY CONFIGURATION ===
security:
  processes_sensitive_data: false
  data_classification: "internal"
  requires_network_access: true
  external_endpoints: []
  security_profile_required: "SP0_BOOTSTRAP"

# === METADATA VALIDATION ===
schema_version:
  major: 1
  minor: 0
  patch: 0
  prerelease: ""
  build: ""
uuid: null
hash: null
