# Canary Orchestrator - ONEX Contract
# Orchestrator node for canary deployment workflow coordination

# === REQUIRED ROOT FIELDS ===
contract_version: {major: 1, minor: 0, patch: 0}
node_name: "canary_orchestrator"
node_version: {major: 1, minor: 0, patch: 0}
contract_name: "canary_orchestrator_contract"
description: "Canary Orchestrator Node - Workflow coordination for canary deployments"
node_type: "ORCHESTRATOR"
name: "canary_orchestrator"
version: {major: 1, minor: 0, patch: 0}
input_model: "ModelCanaryOrchestratorInput"
output_model: "ModelCanaryOrchestratorOutput"

# === TOOL SPECIFICATION ===
tool_specification:
  tool_name: "tool_infrastructure_orchestrator"
  version: {major: 1, minor: 0, patch: 0}
  description: "Infrastructure Orchestrator - Maintains infrastructure connections and coordinates adapter tools"
  main_tool_class: "NodeCanaryOrchestrator"
  container_injection: "ONEXContainer"
  business_logic_pattern: "orchestrator"

# === DEPENDENCIES ===
dependencies:
  - name: "consul_client"
    type: "protocol"
    class_name: "ProtocolConsulClient"
    module: "omnibase.protocol.protocol_consul_client"
  - name: "event_bus"
    type: "protocol"
    class_name: "ProtocolEventBus"
    module: "omnibase.protocol.protocol_event_bus"
  - name: "file_system"
    type: "protocol"
    class_name: "ProtocolFileSystem"
    module: "omnibase.protocol.protocol_file_system"

# === EVENT TYPE CONFIGURATION ===
event_type:
  primary_events: ["workflow_orchestration", "infrastructure_coordination", "adapter_management"]
  event_categories: ["infrastructure", "orchestration", "workflow_management"]
  publish_events: true
  subscribe_events: true
  event_routing: "infrastructure"

# === INPUT/OUTPUT STATE ===
input_state:
  object_type: "object"
  required: ["operation_type", "workflow_id"]
  optional: ["correlation_id", "parameters"]

output_state:
  object_type: "object"
  required: ["status", "workflow_result"]
  optional: ["error_message", "execution_metrics"]

# === DEFINITIONS (Required by ModelContractContent) ===
definitions:
  models: {}
  schemas: {}
  responses: {}

# === WORKFLOW REGISTRY (Required for ORCHESTRATOR nodes) ===
workflow_registry:
  workflows:
    infrastructure_startup:
      workflow_id: "infrastructure_startup"
      workflow_name: "Infrastructure Startup Sequence"
      workflow_type: "sequential"
      steps:
        - step_name: "consul_health_check"
          step_type: "health_check"
          timeout_ms: 5000
        - step_name: "vault_initialization"
          step_type: "service_init"
          timeout_ms: 10000
        - step_name: "kafka_cluster_verify"
          step_type: "cluster_check"
          timeout_ms: 8000
      dependencies: []
      priority: 100
    infrastructure_shutdown:
      workflow_id: "infrastructure_shutdown"
      workflow_name: "Infrastructure Graceful Shutdown"
      workflow_type: "sequential"
      steps:
        - step_name: "drain_kafka_queues"
          step_type: "graceful_drain"
          timeout_ms: 30000
        - step_name: "vault_token_revoke"
          step_type: "cleanup"
          timeout_ms: 5000
        - step_name: "consul_deregister"
          step_type: "deregister"
          timeout_ms: 3000
      dependencies: []
      priority: 200
  default_workflow_id: "infrastructure_startup"
  workflow_selection_strategy: "explicit"
  max_concurrent_workflows: 3

# === SERVICE CONFIGURATION ===
service_configuration:
  is_persistent_service: true
  default_port: 8088

  # Orchestrator HTTP endpoints
  http_endpoints:
    - path: "/health"
      method: "GET"
      description: "Orchestrator health status"
    - path: "/workflows/status"
      method: "GET"
      description: "Get current workflow status"
    - path: "/workflows/list"
      method: "GET"
      description: "List available workflows"

# === ACTIONS ===
actions:
  - name: "start_workflow"
    description: "Start infrastructure workflow"
    inputs: ["operation_type", "workflow_id"]
  - name: "stop_workflow"
    description: "Stop running workflow"
    inputs: ["workflow_id"]

# === PERFORMANCE (Required for ORCHESTRATOR nodes) ===
performance:
  single_operation_max_ms: 1000
