# Consul Projection Subcontract - Service Discovery Integration Pattern
# This subcontract defines how ONEX services are projected into Consul service registry

contract_type: "consul_projection_subcontract"
contract_version:
  major: 1
  minor: 0
  patch: 0

metadata:
  name: "ConsulProjectionSubcontract"
  description: "Service discovery integration pattern for ONEX to Consul projection"
  author: "ONEX Framework Team"
  created: "2025-08-19"
  purpose: "Define consistent service registration and discovery patterns"

business_logic:
  pattern: "service_projection"
  ai_agent:
    capabilities: ["service_registration", "health_monitoring", "metadata_projection"]
    coordination_patterns: ["service_discovery", "health_checking"]
    performance_targets:
      registration_latency: "<100ms"
      discovery_latency: "<50ms"
      health_check_interval: "30s"

# Service Projection Strategy
projection_strategy:
  name: "ONEXConsulProjection"
  description: "Bi-directional projection between ONEX services and Consul registry"

  # Service registration patterns
  registration_patterns:
    onex_service_to_consul:
      - extract_service_metadata
      - transform_to_consul_format
      - register_with_health_check
      - establish_watch_patterns

    consul_service_to_onex:
      - monitor_consul_changes
      - validate_onex_compatibility
      - project_to_onex_registry
      - maintain_synchronization

  # Metadata transformation rules
  metadata_transformation:
    onex_to_consul:
      service_name: "onex.service.name"
      service_id: "onex.service.uuid"
      service_port: "onex.service.port"
      service_tags: ["onex", "domain:{domain}", "tier:{tier}"]
      service_meta:
        onex_namespace: "onex.service.namespace"
        onex_version: "onex.service.version"
        onex_contract_hash: "onex.service.contract_hash"

    consul_to_onex:
      uuid: "service_meta.onex_namespace.uuid"
      namespace: "service_meta.onex_namespace"
      version: "service_meta.onex_version"
      capabilities: "derived_from_tags"

# Health Check Integration
health_integration:
  onex_health_to_consul:
    endpoint_pattern: "http://{host}:{port}/health"
    check_interval: "30s"
    timeout: "5s"
    deregister_critical_after: "90s"

  consul_health_to_onex:
    status_mapping:
      passing: "healthy"
      warning: "degraded"
      critical: "unhealthy"

    propagation_strategy: "event_bus_notification"

# Service Discovery Patterns
discovery_patterns:
  by_service_name:
    consul_query: "service/{service_name}"
    onex_filter: "namespace.service_name"

  by_tags:
    consul_query: "service?tag={tag}"
    onex_filter: "tags.contains"

  by_health_status:
    consul_query: "health/service/{service_name}?passing"
    onex_filter: "health_status.eq"

# Conflict Resolution
conflict_resolution:
  registration_conflicts:
    strategy: "onex_authoritative"
    resolution: "overwrite_consul_entry"

  metadata_conflicts:
    strategy: "merge_with_onex_priority"
    resolution: "preserve_onex_metadata"

# Performance Optimization
performance_optimization:
  caching:
    service_cache_ttl: "60s"
    health_cache_ttl: "30s"
    metadata_cache_ttl: "300s"

  batching:
    registration_batch_size: 10
    health_check_batch_size: 50

  connection_pooling:
    max_connections: 5
    connection_timeout: "10s"

# Observability
observability:
  metrics:
    - "consul.services_registered"
    - "consul.services_discovered"
    - "consul.health_checks_processed"
    - "consul.projection_conflicts"

  events:
    - "service_registered"
    - "service_deregistered"
    - "health_status_changed"
    - "projection_conflict_resolved"

# Code Generation
generation_targets:
  python_runtime:
    projection_logic: true
    metadata_transformers: true
    health_check_handlers: true

  consul_policy_templates:
    service_registration_policy: true
    health_monitoring_policy: true
