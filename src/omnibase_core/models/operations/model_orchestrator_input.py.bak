import uuid
from typing import Any

from pydantic import Field

"""
Orchestrator Input Model - ONEX Standards Compliant.

Input model for NodeOrchestrator operations with workflow coordination configuration.

Extracted from node_orchestrator.py to eliminate embedded class anti-pattern.
"""

from datetime import datetime
from uuid import UUID, uuid4

from pydantic import BaseModel, ConfigDict, Field

from omnibase_core.enums.enum_workflow_execution import EnumExecutionMode
from omnibase_core.models.common.model_schema_value import ModelSchemaValue
from omnibase_core.models.workflows.model_workflow_step_execution import (
    ModelWorkflowStepExecution,
)


class ModelOrchestratorInput(BaseModel):
    """
    Input model for NodeOrchestrator operations.

    Strongly typed input wrapper for workflow coordination
    with execution mode and branching configuration.
    """

    workflow_id: UUID = Field(
        ...,
        description="Unique identifier for this workflow",
    )

    steps: list[ModelWorkflowStepExecution] = Field(
        ...,
        description="Workflow steps with execution metadata and state tracking",
    )

    operation_id: UUID = Field(
        default_factory=uuid4,
        description="Unique identifier for this operation",
    )

    execution_mode: EnumExecutionMode = Field(
        default=EnumExecutionMode.SEQUENTIAL,
        description="Execution mode for workflow steps",
    )

    max_parallel_steps: int = Field(
        default=5,
        description="Maximum parallel steps to execute",
        ge=1,
        le=100,
    )

    global_timeout_ms: int = Field(
        default=300000,  # 5 minutes default
        description="Global timeout for entire workflow in milliseconds",
        ge=1000,
        le=3600000,  # Max 1 hour
    )

    failure_strategy: str = Field(
        default="fail_fast",
        description="Strategy for handling step failures",
    )

    load_balancing_enabled: bool = Field(
        default=False,
        description="Whether load balancing is enabled",
    )

    dependency_resolution_enabled: bool = Field(
        default=True,
        description="Whether dependency resolution is enabled",
    )

    metadata: dict[str, ModelSchemaValue] | None = Field(
        default_factory=dict,
        description="Additional metadata for workflow execution",
    )

    timestamp: datetime = Field(
        default_factory=datetime.now,
        description="Timestamp when workflow was created",
    )

    model_config = ConfigDict(
        extra="ignore",
        arbitrary_types_allowed=True,
        use_enum_values=False,
        validate_assignment=True,
    )
