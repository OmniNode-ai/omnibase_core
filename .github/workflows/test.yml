name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  POETRY_VERSION: "2.2.1"
  PYTHON_VERSION: "3.12"

jobs:
  # Quick smoke test - fails fast on basic issues (5-10s)
  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Note: omnibase_spi is now public - no auth required

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: >-
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            ${{ hashFiles('**/poetry.lock') }}-
            v0.1.1
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-v0.1.1

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root || {
            echo "❌ Dependency install failed"
            exit 1
          }

      - name: Install project
        run: |
          poetry install --no-interaction || {
            echo "❌ Project install failed"
            exit 1
          }

      - name: Run smoke tests
        run: |
          poetry run pytest tests/unit/enums tests/unit/errors \
            --maxfail=5 \
            -x \
            --tb=short

  # Parallel test execution - split into 12 groups for speed and memory management
  # Split strategy rationale:
  #   - 10,987 total tests ÷ 12 splits = ~916 tests/split
  #   - Target: 3-5 minutes per split (measured: 3-4 min avg)
  #   - 12x parallelization speedup vs sequential execution
  #   - Increased from 10 to 12 splits to reduce resource exhaustion in split 6
  test-parallel:
    name: Tests (Split ${{ matrix.split }}/12)
    needs: smoke-test
    runs-on: ubuntu-latest
    # Timeout rationale: 25 minutes provides adequate buffer
    #   - Typical split time: 3-5 minutes
    #   - Setup/teardown: 2-3 minutes (cache restore, dependency install)
    #   - Safety margin: 3x worst case (15 min) + 10 min for runner variance
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        split: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Note: omnibase_spi is now public - no auth required

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: >-
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            ${{ hashFiles('**/poetry.lock') }}-
            v0.1.1
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-v0.1.1

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root || {
            echo "❌ Dependency install failed"
            exit 1
          }

      - name: Install project
        run: |
          poetry install --no-interaction || {
            echo "❌ Project install failed"
            exit 1
          }

      - name: Run test split ${{ matrix.split }}/12
        run: |
          poetry run pytest tests/ \
            --splits 12 \
            --group ${{ matrix.split }} \
            -n auto \
            --timeout=60 \
            --timeout-method=thread \
            --tb=short \
            --junitxml=junit-${{ matrix.split }}.xml
          # Per-test timeout: 60 seconds prevents infinite hangs
          #   - Longest test: ~30 seconds (2x safety margin)
          #   - Thread method: Avoids signal handler issues in parallel execution
          #   - No false positives observed at this threshold
          # All splits now use -n auto after fixing event loop hang issues
          # in test_mixin_hybrid_execution.py tests (asyncio.new_event_loop mocking)

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.split }}
          path: junit-${{ matrix.split }}.xml
          retention-days: 7

  # Coverage report (only runs on main branch to save CI time)
  coverage:
    name: Coverage Report
    if: github.ref == 'refs/heads/main'
    needs: test-parallel
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Note: omnibase_spi is now public - no auth required

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: >-
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            ${{ hashFiles('**/poetry.lock') }}-
            v0.1.1
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-v0.1.1

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests with coverage
        run: |
          poetry run pytest tests/ \
            -n auto \
            --cov=src/omnibase_core \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=60 \
            --tb=short

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Coverage summary
        if: always()
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          poetry run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Note: omnibase_spi is now public - no auth required

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: >-
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            ${{ hashFiles('**/poetry.lock') }}-
            v0.1.1
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-v0.1.1

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Check Black formatting
        run: poetry run black --check src/ tests/

      - name: Check isort import sorting
        run: poetry run isort --check-only src/ tests/

    # MyPy disabled: 234 type errors, >45s execution time
    # Same as pre-commit configuration
    # (see .pre-commit-config.yaml line 52-61)
    # TODO: Re-enable after fixing mixin Protocol definitions
    # and import errors
    # - name: Run mypy type checking
    #   run: poetry run mypy src/omnibase_core

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [smoke-test, test-parallel, lint]
    if: always()

    steps:
      - name: Check test results
        run: |
          smoke="${{ needs.smoke-test.result }}"
          parallel="${{ needs.test-parallel.result }}"
          lint="${{ needs.lint.result }}"

          if [[ "$smoke" == "success" ]] && \
             [[ "$parallel" == "success" ]] && \
             [[ "$lint" == "success" ]]; then
            echo "✅ All tests passed successfully"
            echo "Smoke Tests: ✅ Passed"
            echo "Parallel Tests (12 splits): ✅ Passed"
            echo "Code Quality: ✅ Passed"
            exit 0
          else
            echo "❌ Tests failed"
            echo "Smoke Tests: $smoke"
            echo "Parallel Tests: $parallel"
            echo "Lint: $lint"
            exit 1
          fi
