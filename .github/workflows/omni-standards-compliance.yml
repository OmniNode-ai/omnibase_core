name: Omni* Ecosystem Standards Compliance

on:
  push:
    branches: [ main, develop, feature/*, fix/*, chore/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  REPO_NAME: 'omnibase_core'

jobs:
  structure-validation:
    name: Repository Structure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tools/validation/requirements.txt || echo "No requirements.txt found, using built-in libraries"

      - name: Validate repository structure
        run: |
          python tools/validation/validate_structure.py . ${{ env.REPO_NAME }}

      - name: Upload structure validation report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: structure-validation-report
          path: MIGRATION_REPORT.md
          retention-days: 30

  naming-conventions:
    name: Naming Convention Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate naming conventions
        run: |
          python tools/validation/validate_naming.py .

  optional-audit:
    name: Optional Type Usage Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Audit Optional type usage
        run: |
          python tools/validation/audit_optional.py .

  type-safety:
    name: Type Safety Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run MyPy type checking
        run: |
          poetry run mypy src/ --config-file=mypy.ini || true
          # Note: Continue on MyPy errors for now during transition period

  onex-compliance:
    name: ONEX Architecture Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate ONEX four-node structure
        run: |
          # Check that ONEX node directories exist
          for node_type in effect compute reducer orchestrator; do
            if [ ! -d "src/${{ env.REPO_NAME }}/nodes/$node_type" ]; then
              echo "ERROR: Missing ONEX node directory: nodes/$node_type"
              exit 1
            else
              echo "‚úÖ ONEX node directory exists: nodes/$node_type"
            fi
          done

      - name: Check protocol locations (non-SPI repos)
        if: env.REPO_NAME != 'omnibase_spi'
        run: |
          protocol_count=$(find . -name "protocol_*.py" | wc -l)
          echo "Protocol files found: $protocol_count"

          if [ $protocol_count -gt 3 ]; then
            echo "ERROR: Non-SPI repositories should have ‚â§3 protocol files, found $protocol_count"
            echo "Consider migrating protocols to omnibase_spi repository"
            find . -name "protocol_*.py" | head -10
            exit 1
          else
            echo "‚úÖ Protocol count ($protocol_count) within acceptable limit"
          fi

  migration-readiness:
    name: Migration Readiness Assessment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run migration dry-run
        run: |
          python tools/migration/migrate_repository.py . ${{ env.REPO_NAME }} --dry-run

      - name: Generate compliance report
        run: |
          echo "# üìä Standards Compliance Report" > compliance-report.md
          echo "" >> compliance-report.md
          echo "**Repository**: ${{ env.REPO_NAME }}" >> compliance-report.md
          echo "**Branch**: ${{ github.head_ref || github.ref_name }}" >> compliance-report.md
          echo "**Commit**: ${{ github.sha }}" >> compliance-report.md
          echo "" >> compliance-report.md

          echo "## Structure Validation" >> compliance-report.md
          python tools/validation/validate_structure.py . ${{ env.REPO_NAME }} >> compliance-report.md 2>&1 || true

          echo "" >> compliance-report.md
          echo "## Naming Conventions" >> compliance-report.md
          python tools/validation/validate_naming.py . >> compliance-report.md 2>&1 || true

          echo "" >> compliance-report.md
          echo "## Optional Usage Audit" >> compliance-report.md
          python tools/validation/audit_optional.py . >> compliance-report.md 2>&1 || true

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: standards-compliance-report
          path: compliance-report.md
          retention-days: 30

      - name: Comment PR with compliance status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');

            // Truncate if too long for comment
            const maxLength = 60000;
            let commentBody = report;
            if (report.length > maxLength) {
              commentBody = report.substring(0, maxLength) + '\n\n... (Report truncated, download full report from artifacts)';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üìä Omni* Standards Compliance Report\n\n${commentBody}`
            });

  legacy-compatibility-check:
    name: Legacy Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for forbidden patterns
        run: |
          # Check for /model/ directory (should be /models/)
          if [ -d "src/${{ env.REPO_NAME }}/model" ] && [ -d "src/${{ env.REPO_NAME }}/models" ]; then
            echo "ERROR: Both /model/ and /models/ directories exist - remove /model/"
            exit 1
          elif [ -d "src/${{ env.REPO_NAME }}/model" ]; then
            echo "WARNING: Using /model/ directory - should be /models/ for consistency"
          fi

          # Check for scattered model files
          scattered_models=$(find . -name "*.py" -path "*/api/models.py" -o -path "*/validation/models.py" | head -5)
          if [ -n "$scattered_models" ]; then
            echo "WARNING: Found scattered model files:"
            echo "$scattered_models"
            echo "Consider consolidating into src/${{ env.REPO_NAME }}/models/"
          fi

          echo "‚úÖ Legacy compatibility check completed"

# Additional job for full ecosystem repositories
  ecosystem-validation:
    name: Ecosystem Integration Validation
    runs-on: ubuntu-latest
    if: github.repository_owner == 'OmniNode-ai' || github.repository_owner == 'jonahgabriel'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate ecosystem integration
        run: |
          echo "üåê Validating ecosystem integration for ${{ env.REPO_NAME }}"

          # Check for CLAUDE.md
          if [ ! -f "CLAUDE.md" ]; then
            echo "WARNING: No CLAUDE.md found - consider adding project instructions"
          else
            echo "‚úÖ CLAUDE.md found"
          fi

          # Check for standardization framework compliance
          if [ -f "OMNI_ECOSYSTEM_STANDARDIZATION_FRAMEWORK.md" ]; then
            echo "‚úÖ Standardization framework documentation found"
          else
            echo "INFO: Consider adding standardization framework documentation"
          fi

          # Check for migration tools
          if [ -d "tools/validation" ]; then
            echo "‚úÖ Validation tools directory found"
          else
            echo "WARNING: No validation tools found - consider adding tools/validation/"
          fi

          echo "‚úÖ Ecosystem integration validation completed"