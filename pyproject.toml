[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "omnibase_core"
version = "0.1.0"
description = "ONEX Core Framework - Base classes and essential implementations"
authors = [
    {name = "OmniNode Team", email = "team@omninode.ai"}
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.12"
keywords = [
    "onex",
    "framework",
    "architecture",
    "dependency-injection",
    "base-classes",
    "infrastructure",
    "event-driven",
    "error-handling",
    "node-architecture"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]
dynamic = ["dependencies"]

[project.urls]
homepage = "https://github.com/OmniNode-ai/omnibase_core"
repository = "https://github.com/OmniNode-ai/omnibase_core"
documentation = "https://github.com/OmniNode-ai/omnibase_core/tree/main/docs"

[project.scripts]
omni-agent = "omnibase_core.cli.commands:cli"

[project.optional-dependencies]
cli = ["psutil"]
monitoring = ["prometheus-client", "sentry-sdk"]
kubernetes = ["kubernetes"]
full = ["psutil", "prometheus-client", "sentry-sdk", "kubernetes"]

[tool.poetry]
packages = [{include = "omnibase_core", from = "src"}]
include = [
    "scripts/validation/*.py",
    "scripts/validation/*.json",
    "scripts/validation/*.md"
]

[tool.poetry.dependencies]
python = "^3.12"
# ONEX SPI dependency - Using main branch from GitHub
omnibase_spi = {git = "https://github.com/OmniNode-ai/omnibase_spi.git", branch = "main"}
pydantic = "^2.11.7"
llama-index = "^0.12.0"
fastapi = "^0.115.0"
uvicorn = "^0.32.0"
pyyaml = "^6.0.2"
asyncpg = "^0.29.0"
python-consul = "^1.1.0"
psycopg2-binary = "^2.9.10"
redis = "^6.4.0"
dependency-injector = "^4.48.1"

# CLI Dependencies
click = "^8.1.0"
rich = "^13.7.0"
aiohttp = "^3.9.0"

# Optional CLI Dependencies
psutil = {version = "^5.9.0", optional = true}
kubernetes = {version = "^29.0.0", optional = true}
prometheus-client = {version = "^0.19.0", optional = true}
sentry-sdk = {version = "^1.40.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.0"
pytest-asyncio = "^0.25.0"
mypy = "^1.13.0"
black = "^24.10.0"
isort = "^5.13.0"
ruff = "^0.8.0"
types-pyyaml = "^6.0.12.20250822"
pre-commit = "^4.3.0"
types-requests = "^2.32.4.20250913"
memory-profiler = "^0.61.0"
pyyaml = "^6.0.3"
pytest-cov = "^7.0.0"
pytest-xdist = "^3.8.0"
pytest-split = "^0.10.0"

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    "**/archived/**",
    "**/archive/**",
    "**/__pycache__/**",
    "**/site-packages/**",
]

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = [
    "S101",      # Allow assert statements in tests
    "E501",      # Line too long (technical debt - will fix incrementally)
    "BLE001",    # Blind exception catching (technical debt)
    "E402",      # Module level import not at top (technical debt)
    "TC001",     # Type checking imports (technical debt)
    "TC003",     # Type checking imports (technical debt)
    "PLR0911",   # Too many returns (technical debt)
    "PLR0912",   # Too many branches (technical debt)
    "PLR0913",   # Too many arguments (technical debt)
    "PLR0915",   # Too many statements (technical debt)
    "PLR2004",   # Magic values (technical debt)
    "FBT001",    # Boolean positional args (technical debt)
    "FBT002",    # Boolean default args (technical debt)
    "EM101",     # Exception string literal (technical debt)
    "EM102",     # Exception f-string literal (technical debt)
    "TRY003",    # Long exception messages (technical debt)
    "TRY004",    # Exception type preference (technical debt)
    "TRY300",    # Consider else block (technical debt)
    "DTZ005",    # datetime.now() without tz (technical debt)
    "UP038",     # Use X | Y in isinstance (technical debt)
    "B008",      # Function call in defaults (technical debt)
    "ARG003",    # Unused class method argument (technical debt)
    "ERA001",    # Commented out code (technical debt)
    "SIM102",    # Nested if statements (technical debt)
    "B007",      # Unused loop variable (technical debt)
    "PT018",     # Assertion breakdown (technical debt)
    "EXE001",    # Shebang without executable (technical debt)
    "B904",      # raise from (will fix incrementally)
    "RET505",    # Unnecessary elif (will fix incrementally)
    "COM812",    # Trailing commas (will fix incrementally)
    "C901",      # Function complexity (architectural - not fixable easily)
    "E721",      # Type comparisons (technical debt)
    "N806",      # Variable naming (technical debt)
    "TRY203",    # Redundant exception handler (technical debt)
    "RUF003",    # Comment formatting (technical debt)
    "SIM117",    # Nested with statements (technical debt)
    "SIM105",    # contextlib.suppress (technical debt)
    "PTH123",    # Path.open() (technical debt)
    "PT017",     # pytest.raises in except (technical debt)
    "F841",      # Unused variable (technical debt)
    "ARG002",    # Unused method argument (technical debt)
    "T201",      # Print statements (technical debt)
    "FBT003",    # Boolean positional value in call (technical debt)
    "N802",      # Invalid function name (technical debt)
    "S603",      # Subprocess without shell (technical debt)
    "S607",      # Start process with partial path (technical debt)
    "PT011",     # Pytest raises too broad (technical debt)
    "SLF001",    # Private member access (technical debt)
    "DTZ001",    # Call datetime without tzinfo (technical debt)
    "ARG001",    # Unused function argument (technical debt)
    "G004",      # Logging f-string (technical debt)
    "INP001",    # Implicit namespace package (technical debt)
    "TRY301",    # Raise within try (technical debt)
    "RUF022",    # Unsorted dunder all (technical debt)
    "SIM103",    # Needless bool (technical debt)
    "S301",      # Suspicious pickle usage (technical debt)
    "B019",      # Cached instance method (technical debt)
    "PLW2901",   # Redefined loop name (technical debt)
    "B011",      # Assert false (technical debt)
    "PT015",     # Pytest assert always false (technical debt)
    "RUF005",    # Collection literal concatenation (technical debt)
    "S110",      # Try except pass (technical debt)
    "S112",      # Try except continue (technical debt)
    "SIM108",    # If else block instead of if exp (technical debt)
    "F401",      # Unused import (technical debt)
    "S311",      # Suspicious non-cryptographic random usage (technical debt)
    "S324",      # Hashlib insecure hash function (technical debt)
    "PLR1714",   # Repeated equality comparison (technical debt)
    "UP007",     # Non pep604 annotation (technical debt)
    "RUF012",    # Mutable class default (technical debt)
    "TRY401",    # Verbose log message (technical debt)
    "S105",      # Hardcoded password string (technical debt)
    "B017",      # Assert raises exception (technical debt)
    "A001",      # Builtin variable shadowing (technical debt)
    "PT012",     # Pytest raises with multiple statements (technical debt)
    "RET503",    # Implicit return (technical debt)
    "RET504",    # Unnecessary assign (technical debt)
    "SIM101",    # Duplicate isinstance call (technical debt)
    "SIM110",    # Reimplemented builtin (technical debt)
    "ARG005",    # Unused lambda argument (technical debt)
    "E711",      # None comparison (technical debt)
    "E722",      # Bare except (technical debt)
    "PLR1722",   # Sys exit alias (technical debt)
    "ISC001",    # Implicit string concatenation (conflicts with formatter)
]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
known_first_party = ["omnibase_core", "omnibase_spi"]
extend_skip = ["archived", "archive", ".github/workflows"]
extend_skip_glob = ["tests/fixtures/validation/edge_cases/*.py"]

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = false
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests that test individual components in isolation",
    "integration: Integration tests that test multiple components together",
    "slow: Tests that take a long time to run (>1s)",
    "smoke: Quick smoke tests for basic functionality",
    "performance: Performance and benchmark tests",
    "cache: Cache-related tests",
    "nodes: Node architecture tests",
    "validation: Validation framework tests"
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
    "--tb=short",
    "-n auto"  # Automatic parallel execution using all CPU cores
]

[tool.coverage.run]
source = ["src/omnibase_core"]
omit = [
    "*/tests/*",
    "*/archived/*",
    "*/archive/*",
    "*/__pycache__/*",
    "*/site-packages/*"
]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 60
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod"
]
