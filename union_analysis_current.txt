# Union Type Legitimacy Validation Report

Generated: 2025-09-29T07:48:12.065915
Validation Approach: AST-based Legitimacy Analysis

## Executive Summary

- **Files Scanned**: 658
- **Total Unions**: 999
- **Legitimate Unions**: 978
- **Invalid Unions**: 21
- **Legitimacy Ratio**: 97.9%
- **Issues Found**: 83

## Pattern Statistics

### ✅ Legitimate Patterns

- **optional**: 923
- **discriminated**: 8
- **model_schema_value**: 12
- **error_handling**: 3
- **type_narrowing**: 5
- **simple_union**: 27

### ❌ Invalid Patterns

- **primitive_soup**: 12
- **overly_broad**: 1
- **unclassified_complex**: 8

## Issues Found

- src/omnibase_core/core/type_constraints.py: Line 112: Invalid union pattern: primitive_soup - Union[bool, float, int, str]
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 112: Invalid union pattern: primitive_soup - Union[float, int, str]
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 112: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 116: Invalid union pattern: primitive_soup - Union[bool, dict, float, int, list, str]
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 116: Invalid union pattern: primitive_soup - Union[bool, float, int, list, str]
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 116: Invalid union pattern: primitive_soup - Union[bool, float, int, str]
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 116: Invalid union pattern: primitive_soup - Union[float, int, str]
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 116: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 122: Invalid union pattern: primitive_soup - Union[bool, dict, float, int, list, str]
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 122: Invalid union pattern: primitive_soup - Union[bool, float, int, list, str]
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 122: Invalid union pattern: primitive_soup - Union[bool, float, int, str]
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/core/type_constraints.py: Line 122: Invalid union pattern: primitive_soup - Union[float, int, str]
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/core/type_constraints.py: Line 122: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/models/connections/model_custom_connection_properties.py: Line 170: Complex union pattern needs review - Union[EnumInstanceType, None, str]
- src/omnibase_core/models/connections/model_custom_connection_properties.py: Line 170: Suggestion - Consider using discriminated union or proper model
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Invalid union pattern: primitive_soup - Union[bool, float, int, str]
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Invalid union pattern: primitive_soup - Union[float, int, str]
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Replace with specific type (str, int, etc.) if only one type is actually needed
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Use TypeVar for generic functions: T = TypeVar("T", str, int, float)
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Create discriminated union with Literal discriminator
- src/omnibase_core/models/infrastructure/model_timeout.py: Line 299: Suggestion - Consider using ModelSchemaValue with proper type field
- src/omnibase_core/models/metadata/model_version_union.py: Line 110: Complex union pattern needs review - Union[ModelSemVer, None, VersionDictType]
- src/omnibase_core/models/metadata/model_version_union.py: Line 110: Suggestion - Consider using discriminated union or proper model
- src/omnibase_core/models/operations/model_workflow_payload.py: Line 39: Complex union pattern needs review - Union[ConditionalWorkflowData, LoopWorkflowData, ParallelWorkflowData, SequentialWorkflowData]
- src/omnibase_core/models/operations/model_workflow_payload.py: Line 39: Suggestion - Consider using discriminated union or proper model
- src/omnibase_core/models/operations/model_workflow_payload.py: Line 39: Complex union pattern needs review - Union[ConditionalWorkflowData, ParallelWorkflowData, SequentialWorkflowData]
- src/omnibase_core/models/operations/model_workflow_payload.py: Line 39: Suggestion - Consider using discriminated union or proper model
- src/omnibase_core/models/utils/model_subcontract_constraint_validator.py: Line 155: Complex union pattern needs review - Union[ModelContractData, None, dict]
- src/omnibase_core/models/utils/model_subcontract_constraint_validator.py: Line 155: Suggestion - Consider using discriminated union or proper model
- src/omnibase_core/models/utils/model_subcontract_constraint_validator.py: Line 188: Complex union pattern needs review - Union[ModelContractData, None, dict]
- src/omnibase_core/models/utils/model_subcontract_constraint_validator.py: Line 188: Suggestion - Consider using discriminated union or proper model
- src/omnibase_core/models/utils/model_subcontract_constraint_validator.py: Line 191: Complex union pattern needs review - Union[ModelContractData, None, dict]
- src/omnibase_core/models/utils/model_subcontract_constraint_validator.py: Line 191: Suggestion - Consider using discriminated union or proper model
- src/omnibase_core/models/utils/model_validation_rules_converter.py: Line 97: Invalid union pattern: overly_broad - Union[ModelValidationRules, None, dict, str]
- src/omnibase_core/models/utils/model_validation_rules_converter.py: Line 97: Suggestion - Split into multiple functions with specific types
- src/omnibase_core/models/utils/model_validation_rules_converter.py: Line 97: Suggestion - Create discriminated union with proper discriminator field
- src/omnibase_core/models/utils/model_validation_rules_converter.py: Line 97: Suggestion - Use Protocol or TypeVar for generic behavior
- src/omnibase_core/models/utils/model_validation_rules_converter.py: Line 97: Complex union pattern needs review - Union[ModelValidationRules, None, dict]
- src/omnibase_core/models/utils/model_validation_rules_converter.py: Line 97: Suggestion - Consider using discriminated union or proper model
- Repeated pattern 'Union[bool, float, int, str]' found 4 times across 2 files - consider creating a reusable model
- Repeated pattern 'Union[float, int, str]' found 4 times across 2 files - consider creating a reusable model
- Repeated pattern 'Union[ModelContractData, None, dict]' found 3 times across 1 files - consider creating a reusable model

## Model Suggestions

### Suggestion

```
Replace Union[bool, float, int, str]:
  • class ModelPrimitiveValue(BaseModel):
    - value: str | int | bool | float
    - type_hint: Literal['string', 'integer', 'boolean', 'float']
  • Found in 4 locations:
    - src/omnibase_core/core/type_constraints.py:112
    - src/omnibase_core/core/type_constraints.py:116
    - src/omnibase_core/core/type_constraints.py:122
    - ... and 1 more
  • Example implementation pattern:
    @field_validator('value')
    def validate_value_type(cls, v):
        return v  # Add specific validation logic
```

### Suggestion

```
Replace Union[float, int, str]:
  • class ModelPrimitiveValue(BaseModel):
    - value: str | int | bool | float
    - type_hint: Literal['string', 'integer', 'boolean', 'float']
  • Found in 4 locations:
    - src/omnibase_core/core/type_constraints.py:112
    - src/omnibase_core/core/type_constraints.py:116
    - src/omnibase_core/core/type_constraints.py:122
    - ... and 1 more
  • Example implementation pattern:
```

### Suggestion

```
Replace Union[bool, dict, float, int, list, str]:
  • class ModelFlexibleData(BaseModel):
    - data_type: Literal['primitive', 'collection', 'mapping']
    - value: str | int | bool | float  # Use specific types instead of Any
  • Found in 2 locations:
    - src/omnibase_core/core/type_constraints.py:116
    - src/omnibase_core/core/type_constraints.py:122
  • Example implementation pattern:
    @field_validator('value')
    def validate_value_type(cls, v):
        return v  # Add specific validation logic
```

### Suggestion

```
Replace Union[bool, float, int, list, str]:
  • class ModelFlexibleData(BaseModel):
    - data_type: Literal['primitive', 'collection', 'mapping']
    - value: str | int | bool | float  # Use specific types instead of Any
  • Found in 2 locations:
    - src/omnibase_core/core/type_constraints.py:116
    - src/omnibase_core/core/type_constraints.py:122
  • Example implementation pattern:
    @field_validator('value')
    def validate_value_type(cls, v):
        return v  # Add specific validation logic
```

### Suggestion

```
Replace Union[EnumInstanceType, None, str]:
  • class ModelEnuminstancetypeUnion(BaseModel):
    - value: EnumInstanceType | None | str
    - discriminator: str
  • Found in 1 locations:
    - src/omnibase_core/models/connections/model_custom_connection_properties.py:170
```

### Suggestion

```
Replace Union[ModelSemVer, None, VersionDictType]:
  • class ModelModelsemverUnion(BaseModel):
    - value: ModelSemVer | None | VersionDictType
    - discriminator: str
  • Found in 1 locations:
    - src/omnibase_core/models/metadata/model_version_union.py:110
```

### Suggestion

```
Replace Union[ConditionalWorkflowData, LoopWorkflowData, ParallelWorkflowData, SequentialWorkflowData]:
  • class ModelConditionalworkflowdataUnion(BaseModel):
    - value: ConditionalWorkflowData | LoopWorkflowData | ParallelWorkflowData | SequentialWorkflowData
    - discriminator: str
  • Found in 1 locations:
    - src/omnibase_core/models/operations/model_workflow_payload.py:39
```

### Suggestion

```
Replace Union[ConditionalWorkflowData, ParallelWorkflowData, SequentialWorkflowData]:
  • class ModelConditionalworkflowdataUnion(BaseModel):
    - value: ConditionalWorkflowData | ParallelWorkflowData | SequentialWorkflowData
    - discriminator: str
  • Found in 1 locations:
    - src/omnibase_core/models/operations/model_workflow_payload.py:39
```

### Suggestion

```
Replace Union[ModelContractData, None, dict]:
  • class ModelFlexibleData(BaseModel):
    - data_type: Literal['primitive', 'collection', 'mapping']
    - value: str | int | bool | float  # Use specific types instead of Any
  • Found in 3 locations:
    - src/omnibase_core/models/utils/model_subcontract_constraint_validator.py:155
    - src/omnibase_core/models/utils/model_subcontract_constraint_validator.py:188
    - src/omnibase_core/models/utils/model_subcontract_constraint_validator.py:191
  • Example implementation pattern:
```

### Suggestion

```
Replace Union[ModelValidationRules, None, dict, str]:
  • class ModelFlexibleData(BaseModel):
    - data_type: Literal['primitive', 'collection', 'mapping']
    - value: str | int | bool | float  # Use specific types instead of Any
  • Found in 1 locations:
    - src/omnibase_core/models/utils/model_validation_rules_converter.py:97
```

### Suggestion

```
Replace Union[ModelValidationRules, None, dict]:
  • class ModelFlexibleData(BaseModel):
    - data_type: Literal['primitive', 'collection', 'mapping']
    - value: str | int | bool | float  # Use specific types instead of Any
  • Found in 1 locations:
    - src/omnibase_core/models/utils/model_validation_rules_converter.py:97
```

## Legitimacy Criteria

### ✅ Legitimate Pattern Types

- optional: T | None patterns
- result_monadic: Result[T, E] error handling
- discriminated: Unions with Literal discriminators
- model_schema_value: Proper ModelSchemaValue usage
- error_handling: Exception handling patterns
- type_narrowing: Related type narrowing (str | Path)
- simple_union: Small coherent unions

### ❌ Invalid Pattern Types

- primitive_soup: 3+ primitive types without semantic meaning
- any_contaminated: Unions containing Any types
- overly_broad: 5+ types or mixed primitive/complex without semantics
- semantic_mismatch: Unrelated type combinations
- unclassified_complex: Complex patterns needing review
