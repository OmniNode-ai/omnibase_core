# PostgreSQL Database for ONEX
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: onex
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: onex
            - name: POSTGRES_USER
              value: onex
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 4Gi
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U onex -d onex -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U onex -d onex -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
        - name: postgres-init
          configMap:
            name: postgres-init-scripts

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: onex
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: postgres
      protocol: TCP
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database

---
# PostgreSQL Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: onex
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
type: Opaque
stringData:
  POSTGRES_PASSWORD: "CHANGE_ME_IN_PRODUCTION"

---
# PostgreSQL Init Scripts ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: onex
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  init.sql: |
    -- ONEX Database Initialization

    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";

    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS onex_core;
    CREATE SCHEMA IF NOT EXISTS onex_processing;
    CREATE SCHEMA IF NOT EXISTS onex_monitoring;

    -- Create tables for Smart Responder Chain
    CREATE TABLE IF NOT EXISTS onex_processing.processing_requests (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        request_text TEXT NOT NULL,
        tier_used VARCHAR(50) NOT NULL,
        processing_time_ms INTEGER NOT NULL,
        result_content TEXT,
        metadata JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_processing_requests_created_at ON onex_processing.processing_requests(created_at);
    CREATE INDEX IF NOT EXISTS idx_processing_requests_tier_used ON onex_processing.processing_requests(tier_used);

    -- Grant permissions
    GRANT USAGE ON SCHEMA onex_core TO onex;
    GRANT USAGE ON SCHEMA onex_processing TO onex;
    GRANT USAGE ON SCHEMA onex_monitoring TO onex;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA onex_processing TO onex;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA onex_processing TO onex;
